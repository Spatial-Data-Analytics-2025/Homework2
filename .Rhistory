# Combined map
map_relocate = ggplot() +
geom_sf(data = good_buffers, fill = NA, color = "red", size = 2) +
geom_sf(data = good_centers, color = "red", size = 2, shape = 5) +
geom_sf(data = fuel_stations, color = "black", size = 1) +
geom_sf(data = schools, color = "green", size = .8) +
geom_sf(data = relocate_points, color = "magenta", size = 3, shape = 4) +
geom_sf(data = good_routes, color = "yellow", size = 4) +
theme_bw() +
ggtitle("Map of Stations to Relocate")
# Show the map
map_relocate
# Save for dashboard
saveRDS(map_relocate, file = "map_of_stations_to_relocate.rds")
load("C:/Users/sread/OneDrive/Documents/DACSS690D/Homework1/.RData")
library(sf)
library(leaflet)
library(htmlwidgets)
# Read your layers
secured_schoolChicago <- st_read("chicago_spatial_data.gpkg", layer = "schools")
gas_relocate <- st_read("chicago_spatial_data.gpkg", layer = "relocate_points")
# Optional: intersect secured schools with gas_relocate to mimic your sjoin
schools_intersect <- st_intersection(secured_schoolChicago, gas_relocate)
# Create interactive map with a real street basemap
m <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%  # similar to Python CartoDB Positron
addPolygons(data = schools_intersect,
color = "yellow", weight = 2, fillOpacity = 0.4,
group = "Secured Schools Intersect") %>%
addPolygons(data = gas_relocate,
color = "red", weight = 2, fillOpacity = 0.2,
group = "Gas Relocate Areas") %>%
addLayersControl(
overlayGroups = c("Secured Schools Intersect", "Gas Relocate Areas"),
options = layersControlOptions(collapsed = FALSE)
)
library(sf)
library(leaflet)
library(htmlwidgets)
# Read layers
secured_schoolChicago <- st_read("chicago_spatial_data.gpkg", layer = "schools")
gas_relocate <- st_read("chicago_spatial_data.gpkg", layer = "relocate_points")
# Transform to WGS84 (long-lat)
secured_schoolChicago <- st_transform(secured_schoolChicago, 4326)
gas_relocate <- st_transform(gas_relocate, 4326)
# Optional: intersect secured schools with gas_relocate
schools_intersect <- st_intersection(secured_schoolChicago, gas_relocate)
# Create interactive map
m <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron) %>%
# Schools (polygons or points depending on your layer type)
addCircleMarkers(data = schools_intersect, color = "yellow", radius = 3, fillOpacity = 0.5,
group = "Secured Schools Intersect") %>%
# Gas relocate points
addCircleMarkers(data = gas_relocate, color = "red", radius = 4, fillOpacity = 0.7,
group = "Gas Relocate Areas") %>%
addLayersControl(
overlayGroups = c("Secured Schools Intersect", "Gas Relocate Areas"),
options = layersControlOptions(collapsed = FALSE)
)
# Show map
m
# Save to HTML for dashboard
saveWidget(m, "schools_gas_relocate_map.html")
library(sf)
library(ggplot2)
library(ggspatial)
# Read all your layers from the GeoPackage
fuel_stations <- st_read("chicago_spatial_data.gpkg", layer = "fuel_stations")
schools <- st_read("chicago_spatial_data.gpkg", layer = "schools")
good_buffers <- st_read("chicago_spatial_data.gpkg", layer = "good_buffers")
good_centers <- st_read("chicago_spatial_data.gpkg", layer = "good_centers")
relocate_points <- st_read("chicago_spatial_data.gpkg", layer = "relocate_points")
good_routes <- st_read("chicago_spatial_data.gpkg", layer = "good_routes")
# Transform all layers to WGS84 (EPSG:4326) for OSM tiles
layers <- list(fuel_stations, schools, good_buffers, good_centers, relocate_points, good_routes)
layers <- lapply(layers, st_transform, 4326)
fuel_stations <- layers[[1]]
schools <- layers[[2]]
good_buffers <- layers[[3]]
good_centers <- layers[[4]]
relocate_points <- layers[[5]]
good_routes <- layers[[6]]
# Plot using OpenStreetMap tiles
map_gg <- ggplot() +
annotation_map_tile(type = "osm", zoom = NULL) +   # OSM street tiles
geom_sf(data = good_buffers, fill = NA, color = "red", size = 0.7) +
geom_sf(data = good_centers, color = "red", size = 2, shape = 16) +
geom_sf(data = fuel_stations, color = "black", size = 1) +
geom_sf(data = schools, color = "green", size = 1) +
geom_sf(data = good_routes, color = "blue", size = 1) +
geom_sf(data = relocate_points, color = "magenta", size = 3, shape = 4) +
ggtitle("Map of Stations to Relocate") +
theme_minimal()
# Show the map
map_gg
# Save the plot for later use in R dashboards
saveRDS(map_gg, file = "stations_relocate_map.rds")
library(sf)
library(ggplot2)
library(ggspatial)
library(dplyr)
# Read layers
schools <- st_read("chicago_spatial_data.gpkg", layer = "schools")
relocate_points <- st_read("chicago_spatial_data.gpkg", layer = "relocate_points")
# Transform to WGS84 for OSM tiles
schools <- st_transform(schools, 4326)
relocate_points <- st_transform(relocate_points, 4326)
# Spatial join: keep only schools near relocate points
secured_schools <- st_join(schools, relocate_points, join = st_intersects, left = FALSE)
# Plot
map_gg <- ggplot() +
annotation_map_tile(type = "osm") +  # OpenStreetMap tiles
geom_sf(data = secured_schools, color = "yellow", size = 2) +
geom_sf(data = relocate_points, color = "red", size = 3, shape = 4) +
ggtitle("Relocate Points and Nearby Schools") +
theme_minimal()
map_gg
# Save for dashboard
saveRDS(map_gg, file = "relocate_points_schools_map.rds")
library(sf)
library(ggplot2)
library(ggspatial)
library(dplyr)
# Read layers
schools <- st_read("chicago_spatial_data.gpkg", layer = "schools")
relocate_points <- st_read("chicago_spatial_data.gpkg", layer = "relocate_points")
# Transform to WGS84 for OSM tiles
schools <- st_transform(schools, 4326)
relocate_points <- st_transform(relocate_points, 4326)
# Optional: create a small buffer around relocate points (e.g., 50 meters)
relocate_buffer <- st_buffer(relocate_points, dist = 0.0005)  # ~50m in lon/lat degrees
# Keep only schools that intersect with any relocate point buffer
secured_schools <- st_intersection(schools, relocate_buffer)
# Plot
map_gg <- ggplot() +
annotation_map_tile(type = "osm") +  # OpenStreetMap tiles
geom_sf(data = secured_schools, color = "yellow", size = 2) +
geom_sf(data = relocate_points, color = "red", size = 3, shape = 4) +
ggtitle("Relocate Points and Nearby Schools") +
theme_minimal()
map_gg
library(sf)
library(dplyr)
library(mapview)
install.packages("mapview")
library(mapview)
library(sf)
library(dplyr)
# Load data
gpklink <- "chicago_spatial_data.gpkg"
relocate_points <- read_sf(gpklink, layer = "relocate_points")
schools <- read_sf(gpklink, layer = "schools")
# Reproject to WGS84 (required for map tiles)
relocate_points <- st_transform(relocate_points, 4326)
schools <- st_transform(schools, 4326)
# Create 75 meter buffer around relocate points
buffer_75m <- st_buffer(relocate_points, dist = 75)
# Select schools that intersect the buffer
nearby_schools <- st_intersection(schools, buffer_75m)
# Interactive map
mapview(buffer_75m, color = "red", alpha = 0.2, legend = FALSE) +
mapview(nearby_schools, color = "yellow", legend = FALSE) +
mapview(relocate_points, color = "red", cex = 2, layer.name = "Relocate Points")
library(ggplot2)
# Good routes
routes_gg = ggplot() +
theme_bw() +
geom_sf(data = good_routes, color = 'yellow') +
ggtitle("Good Routes for Gas")
routes_gg
saveRDS(routes_gg, file='good_routes.rds')
library(ggplot2)
# Good routes
routes_gg = ggplot() +
theme_bw() +
geom_sf(data = good_routes, color = 'Blue') +
ggtitle("Good Routes for Gas")
routes_gg
saveRDS(routes_gg, file='good_routes.rds')
library(ggplot2)
# Good routes
Routes_Map = ggplot() +
theme_bw() +
geom_sf(data = good_routes, color = 'Blue') +
ggtitle("Good Routes for Gas Stations")
routes_gg
saveRDS(Routes_Map, file='Routes_Map.rds')
library(ggplot2)
# Good routes
Routes_Map = ggplot() +
theme_bw() +
geom_sf(data = good_routes, color = 'Blue') +
ggtitle("Good Routes for Gas Stations")
routes_gg
saveRDS(Routes_Map, file='Routes_Map.rds')
install.packages("mapview")
library(mapview)
library(sf)
library(dplyr)
gpklink <- "chicago_spatial_data.gpkg"
relocate_points <- read_sf(gpklink, layer = "relocate_points")
schools <- read_sf(gpklink, layer = "schools")
relocate_points <- st_transform(relocate_points, 4326)
schools <- st_transform(schools, 4326)
buffer_75m <- st_buffer(relocate_points, dist = 75)
nearby_schools <- st_intersection(schools, buffer_75m)
# Create the map and assign to an object
Relocation_Map <- mapview(buffer_75m, color = "red", alpha = 0.2, legend = FALSE) +
mapview(nearby_schools, color = "yellow", legend = FALSE) +
mapview(relocate_points, color = "red", cex = 2, layer.name = "Relocate Points")
# View the map
Relocation_Map
# Save the map as an RDS
saveRDS(Relocation_Map, file = "Relocation_Map.rds")
install.packages("mapview")
library(ggplot2)
library(sf)
# Combined map
map_relocate = ggplot() +
geom_sf(data = good_buffers, fill = NA, color = "red", size = 2) +
geom_sf(data = good_centers, color = "red", size = 2, shape = 5) +
geom_sf(data = fuel_stations, color = "black", size = 1) +
geom_sf(data = schools, color = "green", size = .8) +
geom_sf(data = relocate_points, color = "magenta", size = 3, shape = 4) +
geom_sf(data = good_routes, color = "blue", size = 4) +
theme_bw() +
ggtitle("Map of Stations to Relocate")
# Show the map
map_relocate
# Save for dashboard
saveRDS(map_relocate, file = "map_of_stations_to_relocate.rds")
library(ggplot2)
library(sf)
library(dplyr)
# Create a combined map with only points having a legend
map_relocate_simple <- ggplot() +
geom_sf(data = good_centers, aes(shape = "Good Center"), color = "red", size = 2) +
geom_sf(data = fuel_stations, aes(shape = "Fuel Station"), color = "black", size = 1) +
geom_sf(data = schools, aes(shape = "School"), color = "green", size = 0.8) +
geom_sf(data = relocate_points, aes(shape = "Relocate Point"), color = "magenta", size = 3) +
scale_shape_manual(
name = "Legend",
values = c(
"Fuel Station" = 16,
"School" = 16,
"Good Center" = 5,
"Relocate Point" = 4
)
) +
theme_bw() +
ggtitle("Map of Stations to Relocate") +
theme(legend.position = "right")
# Show the map
map_relocate_simple
# Save for dashboard
saveRDS(map_relocate_simple, file = "map_of_stations_to_relocate_simple.rds")
library(ggplot2)
library(sf)
library(dplyr)
# Combined map with routes shown but not in the legend
map_relocate_final <- ggplot() +
# Routes (not in legend)
geom_sf(data = good_routes, color = "blue", size = 1, show.legend = FALSE) +
# Points with legend
geom_sf(data = good_centers, aes(shape = "Good Center"), color = "red", size = 2) +
geom_sf(data = fuel_stations, aes(shape = "Fuel Station"), color = "black", size = 1) +
geom_sf(data = schools, aes(shape = "School"), color = "green", size = 0.8) +
geom_sf(data = relocate_points, aes(shape = "Relocate Point"), color = "magenta", size = 3) +
# Legend setup
scale_shape_manual(
name = "Legend",
values = c(
"Fuel Station" = 16,
"School" = 16,
"Good Center" = 5,
"Relocate Point" = 4
)
) +
theme_bw() +
ggtitle("Map of Stations to Relocate") +
theme(legend.position = "right")
# Show the map
map_relocate_final
# Save for dashboard
saveRDS(map_relocate_final, file = "map_of_stations_to_relocate_final.rds")
library(sf)
fuel_stations = read_sf(gpklink, layer = "fuel_stations")
schools = read_sf(gpklink, layer = "schools")
good_buffers = read_sf(gpklink, layer = "good_buffers")
good_centers = read_sf(gpklink, layer = "relocate_points")
relocate_points = read_sf(gpklink, layer = "good_centers")
good_routes = read_sf(gpklink, layer = "good_routes")
library(ggplot2)
# Good routes
Routes_Map = ggplot() +
theme_bw() +
geom_sf(data = good_routes, color = 'Blue') +
ggtitle("Good Routes for Gas Stations")
Routes_Map
saveRDS(Routes_Map, file='Routes_Map.rds')
library(ggplot2)
library(sf)
library(dplyr)
# Combined map with routes shown but not in the legend
map_relocate_final <- ggplot() +
# Routes (not in legend)
geom_sf(data = good_routes, color = "blue", size = 1, show.legend = FALSE) +
# Points with legend
geom_sf(data = good_centers, aes(shape = "Good Center"), color = "red", size = 2) +
geom_sf(data = fuel_stations, aes(shape = "Fuel Station"), color = "black", size = 1) +
geom_sf(data = schools, aes(shape = "School"), color = "green", size = 0.8) +
geom_sf(data = relocate_points, aes(shape = "Relocate Point"), color = "magenta", size = 3) +
# Legend setup
scale_shape_manual(
name = "Legend",
values = c(
"Fuel Station" = 16,
"School" = 16,
"Good Center" = 5,
"Relocate Point" = 4
)
) +
theme_bw() +
ggtitle("Map of Stations to Relocate") +
theme(legend.position = "right")
# Show the map
map_relocate_final
# Save for dashboard
saveRDS(map_relocate_final, file = "map_of_stations_to_relocate_final.rds")
library(ggplot2)
library(sf)
library(dplyr)
# Combined map with routes shown but not in the legend
map_relocate_final <- ggplot() +
# Routes (not in legend)
geom_sf(data = good_routes, color = "blue", size = 1, show.legend = FALSE) +
# Points with legend
geom_sf(data = good_centers, aes(shape = "Good Center"), color = "red", size = 2) +
geom_sf(data = fuel_stations, aes(shape = "Fuel Station"), color = "black", size = 1) +
geom_sf(data = schools, aes(shape = "School"), color = "green", size = 0.8) +
geom_sf(data = relocate_points, aes(shape = "Relocate Point"), color = "magenta", size = 3) +
# Legend setup
scale_shape_manual(
name = "Legend",
values = c(
"Fuel Station" = 16,
"School" = 16,
"Fuel Station to be relocated" = 5,
"Relocate Point" = 4
)
) +
theme_bw() +
ggtitle("Map of Stations to Relocate") +
theme(legend.position = "right")
# Show the map
map_relocate_final
library(ggplot2)
library(sf)
library(dplyr)
# Combined map with routes shown but not in the legend
map_relocate_final <- ggplot() +
# Routes (not in legend)
geom_sf(data = good_routes, color = "blue", size = 1, show.legend = FALSE) +
# Points with legend
geom_sf(data = good_centers, aes(shape = "Good Center"), color = "red", size = 2) +
geom_sf(data = fuel_stations, aes(shape = "Fuel Station"), color = "black", size = 1) +
geom_sf(data = schools, aes(shape = "School"), color = "green", size = 0.8) +
geom_sf(data = relocate_points, aes(shape = "Relocate Point"), color = "magenta", size = 3) +
# Legend setup
scale_shape_manual(
name = "Legend",
values = c(
"Fuel Station" = 16,
"School" = 16,
"good_centers" = 5,
"Relocate Point" = 4
)
) +
theme_bw() +
ggtitle("Map of Stations to Relocate") +
theme(legend.position = "right")
# Show the map
map_relocate_final
library(ggplot2)
library(sf)
library(dplyr)
# Combined map with routes shown but not in the legend
map_relocate_final <- ggplot() +
# Routes (not in legend)
geom_sf(data = good_routes, color = "blue", size = 1, show.legend = FALSE) +
# Points with legend
geom_sf(data = good_centers, aes(shape = "Good Center"), color = "red", size = 2) +
geom_sf(data = fuel_stations, aes(shape = "Fuel Station"), color = "black", size = 1) +
geom_sf(data = schools, aes(shape = "School"), color = "green", size = 0.8) +
geom_sf(data = relocate_points, aes(shape = "Relocate Point"), color = "magenta", size = 3) +
# Legend setup
scale_shape_manual(
name = "Legend",
values = c(
"Fuel Station" = 16,
"School" = 16,
"Stations to Relocate" = 5,
"Relocate Point" = 4
)
) +
theme_bw() +
ggtitle("Map of Stations to Relocate") +
theme(legend.position = "right")
# Show the map
map_relocate_final
library(ggplot2)
library(sf)
library(dplyr)
# Add a 'type' column to each dataset for consistent legend
good_centers$type <- "Stations to Relocate"  # Good centers are stations to relocate
relocate_points$type <- "Relocate Point"
fuel_stations$type <- "Fuel Station"
schools$type <- "School"
# Combine all points for legend
legend_points <- bind_rows(good_centers, relocate_points, fuel_stations, schools)
# Combined map
map_relocate_final <- ggplot() +
# Routes (not in legend)
geom_sf(data = good_routes, color = "blue", size = 1, show.legend = FALSE) +
# Points with legend
geom_sf(data = legend_points, aes(color = type, shape = type, size = type)) +
# Legend settings
scale_color_manual(
values = c(
"Stations to Relocate" = "red",
"Relocate Point" = "magenta",
"Fuel Station" = "black",
"School" = "green"
)
) +
scale_shape_manual(
values = c(
"Stations to Relocate" = 5,
"Relocate Point" = 4,
"Fuel Station" = 16,
"School" = 16
)
) +
scale_size_manual(
values = c(
"Stations to Relocate" = 2,
"Relocate Point" = 3,
"Fuel Station" = 1,
"School" = 1.5
)
) +
theme_bw() +
ggtitle("Map of Stations to Relocate") +
theme(legend.position = "right")
# Show map
map_relocate_final
# Save for dashboard
saveRDS(map_relocate_final, file = "map_of_stations_to_relocate_final.rds")
library(ggplot2)
library(sf)
library(dplyr)
# Combined map with routes shown but not in the legend
map_relocate_final <- ggplot() +
# Routes (not in legend)
geom_sf(data = good_routes, color = "blue", size = 1, show.legend = FALSE) +
# Points with legend
geom_sf(data = good_centers, aes(shape = "Stations to Relocate"), color = "red", size = 2) +
geom_sf(data = fuel_stations, aes(shape = "Fuel Station"), color = "black", size = 1) +
geom_sf(data = schools, aes(shape = "School"), color = "green", size = 0.8) +
geom_sf(data = relocate_points, aes(shape = "Relocate Point"), color = "magenta", size = 3) +
# Legend setup
scale_shape_manual(
name = "Legend",
values = c(
"Fuel Station" = 16,
"School" = 16,
"Stations to Relocate" = 5,
"Relocate Point" = 4
)
) +
# Theme and title
theme_bw() +
ggtitle("Map of Stations to Relocate") +
theme(legend.position = "right")
# Show the map
map_relocate_final
# Save for dashboard
saveRDS(map_relocate_final, file = "map_of_stations_to_relocate_final.rds")
library(flexdashboard) # always
library(ggplot2)
readRDS("Routes_Map.rds")
readRDS("Relocation_Map.rds")
readRDS("map_of_stations_to_relocate.rds")
getwd()
list.files()
library(flexdashboard) # always
library(ggplot2)
getwd()
list.files()
# Ensure knitr uses a stable temp directory
library(flexdashboard)
# Run this before knitting
saveRDS(my_map_object, "Routes_Map.rds")
saveRDS(relocation_map, "Relocation_Map.rds")
saveRDS(stations_map, "map_of_stations_to_relocate.rds")
library(flexdashboard)
knitr::opts_knit$set(root.dir = "C:/Users/sread/OneDrive/Documents/DACSS690D/Homework2")
setwd("C:/Users/sread/OneDrive/Documents/DACSS690D/Homework2")
library(flexdashboard)
knitr::opts_knit$set(root.dir = "C:/Users/sread/OneDrive/Documents/DACSS690D/Homework2")
setwd("C:/Users/sread/OneDrive/Documents/DACSS690D/Homework2")
